@page "/product/create";
@page "/product/update/{Id:int}"

@inject IWebHostEnvironment _WebEnvironment;
@inject IProductRepository productRepository;
@inject ICategoryRepository CategoryRepository;
@inject NavigationManager navigationManager;
@inject IJSRuntime jsRuntime;

@if (IsLoading)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="Loading..." class="img-fluid" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id > 0 ? "Update" : "Create") Product</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm FormName="UpsertProduct" Model="Product" OnValidSubmit="OnUpsertProduct">
                <DataAnnotationsValidator />

                <div class="border p-3 mt-4">
                    <div class="form-group py-3 col-12">
                        <label class="form-label">Name</label>
                        <InputText class="form-control" @bind-Value="Product.Name" />
                        <ValidationMessage For="@(()=> Product.Name)" />
                    </div>
                    <div class="form-group py-3 col-12">
                        <label class="form-label">Description</label>
                        <InputText class="form-control" @bind-Value="Product.Description" />
                        <ValidationMessage For="@(() => Product.Description)" />
                    </div>
                    <div class="form-group py-3 col-12">
                        <label class="form-label">Price</label>
                        <InputNumber class="form-control" @bind-Value="Product.Price" />
                        <ValidationMessage For="@(() => Product.Price)" />
                    </div>
                    <div class="form-group py-3 col-12">
                        <label class="form-label">Special Tag</label>
                        <InputText class="form-control" @bind-Value="Product.SpecialTag" />
                        <ValidationMessage For="@(() => Product.SpecialTag)" />
                    </div>
                    <div class="form-group py-3 col-12">
                        <label class="form-label">Category</label>
                        <InputSelect class="form-select" @bind-Value="Product.CategoryId">
                            <option value="0" disabled selected>Select Category</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Product.CategoryId)" />
                    </div>
                    <div class="form-group py-3 col-12">
                        @if (Product.ImageUrl == null)
                        {
                            <label class="form-label">Upload Image</label>
                            <InputFile class="form-control" @bind-Value="Product.Price" accept="image/x-png,image/jpeg" OnChange="LoadFiles"></InputFile>
                        }
                        @if (Product.ImageUrl != null)
                        {
                            <div class="row">
                                <div class="col-3">
                                    <img src="@Product.ImageUrl" alt="@Product.Name" class="img-thumbnail"/>
                                </div>
                                <div class="col-md-9">
                                    <i class="bi bi-trash btn btn-outline-danger" @onclick="DeleteImage">Remove</i>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="row mt-3">
                        <div class="col col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled ="@IsLoading"><i class="bi bi-floppy2-fill"></i> @(Id > 0? "Update": "Create")</button>
                        </div>
                        <div class="col col-md-3">
                            <a href="product" class="btn btn-secondary form-control" disabled="@IsLoading"><i class="bi bi-arrow-bar-left"></i> Back To List</a>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm(FormName = "UpsertProduct")]
    private Product Product { get; set; } = new Product();

    private IEnumerable<Category> Categories { get; set; } = new List<Category>();

    public bool IsImageLoading { get; set; } = true;

    public string? _directoryPath { get; set; } = string.Empty;

    public bool IsLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await this.LoadProductAndCategory();
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadProductAndCategory()
    {
        if (Id > 0)
        {
            this.Product = await this.productRepository.GetAsync(Id);
        }

        Categories = await this.CategoryRepository.GetAllAsync();

    }

    public async Task OnUpsertProduct()
    {
        IsLoading = true;

        if(Id > 0)
        {
            await productRepository.UpdateAsync(Product);
            await this.jsRuntime.ToastrSuccess("Product Updated Successfully");
        }
        else
        {
            await productRepository.CreateAsync(Product);
            await this.jsRuntime.ToastrSuccess("Product Created Successfully");
        }

        IsLoading = false;

        navigationManager.NavigateTo("product");
    }

    protected override Task OnInitializedAsync()
    {
        _directoryPath = Path.Combine(_WebEnvironment.WebRootPath, "images", "product");
        return base.OnInitializedAsync();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsLoading = true;

        var file = e.File;

        FileInfo fileInfo = new (file.Name);

        var newFileName = $"{Guid.NewGuid()}{fileInfo.Extension}";

        if (!Directory.Exists(_directoryPath))
        {
            Directory.CreateDirectory(_directoryPath);
        }

        var path = Path.Combine(_directoryPath, newFileName);

        try
        {
            await using (var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024))
            {
                await using (var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    Product.ImageUrl = $"/images/product/{newFileName}";
                    await stream.CopyToAsync(fileStream);
                }
            }
        }
        catch
        {
            jsRuntime.ToastrError("File is too large.");
        }
        finally
        {
            IsLoading = false;
        }
    }

    void DeleteImage()
    {
        if (Product.ImageUrl != null)
        {
            var imageName = Product.ImageUrl.Split('/').LastOrDefault();

            var imageFullPath = Path.Combine(_directoryPath, imageName);

            if (!File.Exists(imageFullPath))
            {
                Product.ImageUrl = null;
                return;
            }

            File.Delete(imageFullPath);

            Product.ImageUrl = null;
            return;
        }
    }

}

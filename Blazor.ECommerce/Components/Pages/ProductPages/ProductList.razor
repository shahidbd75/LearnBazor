 @page "/product"


@inject IProductRepository productRepository;
@inject IJSRuntime jsRuntime;

@if (IsLoading)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="Loading..." class="img-fluid" />
    </div>
} else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Product List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="/product/create" class="btn btn-secondary w-200"><i class="bi bi-plus-square"></i> Add New Product</a>
                </div>
            </div>
            <table class="table table-bordered table-hover table-sm">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Special Tag</th>
                        <th>Category</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var cat in Products)
                    {
                        <tr>
                            <td>@cat.Name</td>
                            <td>@cat.Price</td>
                            <td>@cat.SpecialTag</td>
                            <td>@cat.Category?.Name</td>
                            <td>
                                <a class="btn btn-sm btn-info" href=@($"product/update/{@cat.Id}")><i class="bi bi-pencil-square"></i> Edit</a>
                                <button type="button" class="btn btn-sm btn-danger" @onclick="@(()=> OnDelete(@cat.Id))"><i class="bi bi-trash3"></i> Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <BsModal OnModalClose="DeleteProduct" Title="Are you sure you want to delete this Product?" 
            ButtonBootstrapStyle="btn-danger" ButtonText="Delete"/>
    </div>
}

@code {
    public bool IsLoading { get; set; } = true;

    private IEnumerable<Product> Products = new List<Product>();

    public int SelectedProductId { get; set; } = 0;

    private async Task LoadProducts()
    {
        this.Products = await this.productRepository.GetAllAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await this.LoadProducts();
            IsLoading = false;
            StateHasChanged();
        } 
    }

    private async Task OnDelete(int productId)
    {
        this.SelectedProductId = productId;
        await jsRuntime.InvokeVoidAsync("showConfirmationModal");
    }

    private async Task DeleteProduct(bool isConfirmed)
    {
        IsLoading = true;
        StateHasChanged();
        await jsRuntime.InvokeVoidAsync("hideConfirmationModal");
        if (isConfirmed && SelectedProductId > 0)
        {
            var isDeleted = await this.productRepository.DeleteAsync(SelectedProductId);

            if (isDeleted)
            {
                await jsRuntime.ToastrSuccess("Product deleted successfully.");
                await this.LoadProducts();
                this.SelectedProductId = 0;
            }
            else
            {
                await jsRuntime.ToastrError("Product can not be deleted.");
            }

        }

        IsLoading = false;

        StateHasChanged();
    }
}

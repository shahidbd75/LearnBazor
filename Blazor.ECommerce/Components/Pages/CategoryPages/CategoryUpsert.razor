@page "/category/create";
@page "/category/update/{Id:int}"

<PageTitle>Category</PageTitle>
@inject ICategoryRepository categoryRepository;
@inject NavigationManager navigationManager;
@inject IJSRuntime jsRuntime;

@if (IsLoading)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="Loading..." class="img-fluid" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id > 0 ? "Update" : "Create") Category</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm FormName="UpsertCategory" Model="Category" OnValidSubmit="OnUpsertCategory">
                <DataAnnotationsValidator />

                <div class="border p-3 mt-4">
                    <div class="form-group py-3 col-12">
                        <label class="form-label">Name</label>
                        <InputText class="form-control" @bind-Value="Category.Name" />
                        <ValidationMessage For="@(()=> Category.Name)" />
                    </div>
                    <div class="row mt-3">
                        <div class="col col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled ="@IsLoading"><i class="bi bi-floppy2-fill"></i> Save</button>
                        </div>
                        <div class="col col-md-3">
                            <a href="category" class="btn btn-secondary form-control" disabled="@IsLoading"><i class="bi bi-arrow-bar-left"></i> Back To List</a>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm(FormName = "UpsertCategory")]
    private Category Category { get; set; } = new Category();

    public bool IsLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await this.LoadCategory();
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategory()
    {
        if (Id > 0)
        {
            this.Category = await this.categoryRepository.GetAsync(Id);
        }
    }

    public async Task OnUpsertCategory()
    {
        IsLoading = true;

        if(Id > 0)
        {
            await categoryRepository.UpdateAsync(Category);
            await this.jsRuntime.ToastrSuccess("Category Updated Successfully");
        }
        else
        {
            await categoryRepository.CreateAsync(Category);
            await this.jsRuntime.ToastrSuccess("Category Created Successfully");
        }

        IsLoading = false;

        navigationManager.NavigateTo("category");
    }
}

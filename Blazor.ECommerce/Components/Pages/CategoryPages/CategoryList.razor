 @page "/category"


@inject ICategoryRepository categoryRepository;

@if (IsLoading)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="Loading..." class="img-fluid" />
    </div>
} else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Category List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="/category/create" class="btn btn-secondary w-200"><i class="bi bi-plus-square"></i> Add New Category</a>
                </div>
            </div>
            <table class="table table-bordered table-hover table-sm">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var cat in Categories)
                    {
                        <tr>
                            <td>@cat.Name</td>
                            <td>
                                <a class="btn btn-sm btn-info" href=@($"category/update/{@cat.Id}")><i class="bi bi-pencil-square"></i> Edit</a>
                                <button class="btn btn-sm btn-danger"><i class="bi bi-trash3"></i> Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if (ShowMessage == true)
        {
            <p>Edited Successfully.</p>
        }
    </div>
}

@code {
    public bool IsLoading { get; set; } = true;

    private Boolean ShowMessage { get; set; } = false;

    private IEnumerable<Category> Categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task LoadCategories()
    {
        this.Categories = await this.categoryRepository.GetAllAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await this.LoadCategories();
            IsLoading = false;
            StateHasChanged();
        } 
    }
}
